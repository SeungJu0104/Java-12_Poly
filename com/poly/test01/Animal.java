package com.poly.test01;

public abstract class Animal {//추상클래스는 추상메소드 유무와 상관없이 생성 가능. 그러나 클래스 내에 추상메소드가 1개 이상 존재하면 반드시 추상클래스로 지정.
	
	/* [추상메소드]
	 * 구현부 미작성
	 * 상속받은 클래스에 반드시 나머지 부분을 구현해야한다.
	 * 명시적으로 메소드에 추상 선언해야한다.
	 * (접근제한자) abstract 반환형 메소드명 () { }
	 * 
	 * [추상클래스]
	 * 추상메소드 유무와 관계없이 생성 가능
	 * 그러나 클래스 내에 1개 이상 추상메소드 있으면 반드시 추상클래스 선언해야한다.
	 * 일반 메소드도 사용 가능하다.
	 * extends 사용. 단일 상속.
	 * 자체적으로 객체 생성 불가하다. 단, 레퍼런스 변수 타입으로는 사용가능하다.
	 * (접근제한자) abstract class 클래스명 { }
	 * 
	 * [인터페이스]
	 * 추상클래스의 강화판
	 * 모든 메소드는 추상메소드(따로 지정안해도 묵시적으로 변환)
	 * 변수는 묵시적으로 public static final
	 * 
	 * 업 캐스팅
	 * 상속관계인 오버라이딩하는 메소드에서만 가능하다.
	 * 부모 클래스의 레퍼런스 변수가 모든 자식 타입의 객체 주소를 저장할 수 있다.
	 * 부모 클래스형태로 자동 형변환해준다.
	 * 인터페이스도 적용된다.
	 * 
	 * 다운캐스팅
	 * 상속관계이고 오버라이딩하는 메소드가 아닐 때 사용한다.
	 * 자동으로 형변환이 안되기때문에 강제로 형변환해야한다.
	 * 인터페이스도 적용된다.
	 * ((자식 클래스명) 레퍼런스 변수). 실행할 메소드명( 매개변수 );
	 * 
	 */
	public abstract void bark();//추상 메소드. abstract 선언.
	
	public void eat(String animal) {
		
		System.out.println(animal  + "먹는다.");
		
	}

}
